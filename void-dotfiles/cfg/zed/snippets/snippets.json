{
	"Current datetime": {
		"prefix": "cdtm",
		"body": "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"description": "Insert current datetime (YYYY-mm-dd HH:MM:SS)"
	},
	"Current date": {
		"prefix": "cdate",
		"body": "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
		"description": "Insert current date (YYYY-mm-dd)"
	},
	"Current time": {
		"prefix": "ctime",
		"body": "$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"description": "Insert current time (HH:MM:SS)"
	},
	"UUID": {
		"prefix": "uuid",
		"body": "$UUID",
		"description": "Insert a version 4 UUID"
	},
	"Random digits": {
		"prefix": "rd",
		"body": "$RANDOM",
		"description": "6 random Base-10 digits"
	},
	"Random hex digits": {
		"prefix": "rdh",
		"body": "$RANDOM_HEX",
		"description": "6 random Base-16 digits"
	},
	"todo": {
		"prefix": "todo",
		"body": ["$LINE_COMMENT TODO: $0"]
	},
	"fix": {
		"prefix": "fix",
		"body": ["$LINE_COMMENT FIXME: $0"]
	},
	"bc": {
		"prefix": "block comment",
		"body": ["$BLOCK_COMMENT_START $0 $BLOCK_COMMENT_END"]
	},
	"Picsum Placeholder Image": {
		"prefix": "picsum",
		"body": ["https://picsum.photos/200"],
		"description": "Inserts a random 200x200 placeholder image from Picsum"
	},
	"Console Log Vscode": {
		"prefix": ["log", "clg"],
		"body": ["console.log($1)$0"],
		"description": "Console log statement",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Short Anonymous Function": {
		"prefix": "anf",
		"body": ["($1) => $0"],
		"description": "Anonymous arrow function",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Anonymous Function": {
		"prefix": "anfn",
		"body": ["($1) => {", "\t$0", "}"],
		"description": "Anonymous arrow function",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Immediately Invoked Function Expression": {
		"prefix": "iife",
		"body": ["(() => {", "\t$1", "})()$0"],
		"description": "Immediately Invoked Function Expression",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Export Default Function": {
		"prefix": "edfn",
		"body": ["export default function $1($2) {", "\t$0", "}"],
		"description": "Export default function",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"React Function Component": {
		"prefix": "rfc",
		"body": [
			"export default function ${1:Component}() {",
			"  return (",
			"    <div>",
			"      Hello from ${1:Component}!",
			"    </div>",
			"  );",
			"}"
		],
		"description": "Create a React function component with export default",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"React Functional Component": {
		"prefix": ["rfcn", "rfce"],
		"body": [
			"export const ${1:Component} = () => {",
			"  return (",
			"    <div>",
			"      Hello from ${1:Component}!",
			"    </div>",
			"  );",
			"};"
		],
		"description": "Creates a basic React functional component",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Create useState hook": {
		"prefix": ["uss", "ust"],
		"body": [
			"const [${1:state}, set${2:State}] = useState(${3:defaultState});"
		],
		"description": "Creates React useState hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Create useEffect hook": {
		"prefix": ["use", "uef"],
		"body": ["useEffect(() => {", "\t$0", "}, []);"],
		"description": "Creates React useEffect hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Create useContext hook": {
		"prefix": "usc",
		"body": ["const ${1:value} = useContext(MyContext);"],
		"description": "Creates React useContext hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Create useReducer hook": {
		"prefix": "usd",
		"body": [
			"const [${1:state}, dispatch] = useReducer(${2:reducer}, initialState);"
		],
		"description": "Creates React useReducer hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Create useRef hook": {
		"prefix": "usr",
		"body": ["const ${1:refContainer} = useRef(${2:initialValue});"],
		"description": "Creates React useRef hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Create useImperativeHandle hook": {
		"prefix": "usi",
		"body": ["useImperativeHandle(${1:initialValue}, () => {", "\t", "}, []);"],
		"description": "Creates React useImperativeHandle hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Create useLayoutEffect hook": {
		"prefix": "usl",
		"body": ["useLayoutEffect(() => {", "\t", "}, []);"],
		"description": "Creates React useLayoutEffect hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"return": {
		"prefix": "r",
		"body": "return ${0}",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"import": {
		"prefix": "i",
		"body": "import ${0}",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Import React": {
		"prefix": "imr",
		"body": ["import React from 'react';"],
		"description": "Imports React",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"Try-Catch Statement": {
		"prefix": "trycatch",
		"body": ["try {", "\t$1", "} catch (${0}) {", "\t", "}"],
		"description": "Try-Catch Statement",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	}
}
