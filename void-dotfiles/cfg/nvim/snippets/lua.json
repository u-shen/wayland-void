{
  "require": {
    "prefix": "req",
    "body": ["require(${1:module})"],
    "description": "Require module"
  },
  "assigment": {
    "prefix": "ll",
    "body": ["local ${1:varName} = ${0:value}"],
    "description": "define a variable"
  },
  "local": {
    "prefix": "l",
    "body": ["local ${0}"],
    "description": "declare a variable"
  },
  "locpcall": {
    "prefix": "lpca",
    "body": ["local ${1:status}, ${2:err_or_value} = pcall(${3:function})"],
    "description": "Protect call a function as a variable"
  },
  "locreq": {
    "prefix": "lreq",
    "body": ["local ${1:var} = require(${2:module})"],
    "description": "Require module as a variable"
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:i}=${2:1},${3:10} do", "\t$0", "end"],
    "description": "for loop range"
  },
  "foreach": {
    "prefix": "foreach",
    "body": ["for i, ${1:x} in pairs(${2:table}) do", "\t$0", "end"]
  },

  "function": {
    "prefix": "fu",
    "body": ["function${1|, name|}($2) \n\t$0\nend "],
    "description": "function(..)"
  },
  "autocmd": {
    "body": [
      "vim.api.nvim_create_autocmd({ \"${1:event}\" }, {",
      "  callback = function()",
      "    $0",
      "  end,",
      "})"
    ],
    "prefix": "autocmd"
  },
  "invscode": {
    "body": "if vim.g.vscode then return end",
    "prefix": "invscode"
  },
  "keymap": {
    "body": "vim.keymap.set(${1:mode}, ${2:lhs}, ${3:rhs}, $0)",
    "prefix": "keymap"
  }
}
